println("-------------------start plugin config-------------------")
println("project $project ----> runAsApp : ${project.ext.has('runAsApp') && project.ext.runAsApp}")




if (project.ext.has('runAsApp') && project.ext.runAsApp) {
    //说明：需要兼容的情况有3种(单独组件作为app运行、打包在主app内、组件在多个app上复用但全局拦截器不同)
    //     为了兼容以上3种情况，建议将全局拦截器作为一个单独的module，在此处给不同app添加不同拦截器module
    println("$project ----> set app as host ")
    project.afterEvaluate {
        def appId = project.android.defaultConfig.applicationId
        println("$project ----> appid : $appId avaliable")
        if (appId == null || appId.trim() == "") throw GradleException("application must set applicationId")
    }
    project.dependencies.add("implementation", "com.wlqq.phantom:phantom-host-lib:${versions.phantom.allVersion}")
    project.dependencies.add("implementation", "com.wlqq.phantom:phantom-communication-lib:${versions.phantom.allVersion}")
    apply plugin: 'com.wlqq.phantom.host'
} else if (project.name.startsWith("plugin_")) {
    println("$project ---->  set app as client plugin")
    apply plugin: 'com.wlqq.phantom.plugin'


    project.dependencies.add("compileOnly", "com.wlqq.phantom:phantom-communication-lib:${versions.phantom.allVersion}")
    project.dependencies.add("compileOnly", "com.wlqq.phantom:phantom-plugin-lib:${versions.phantom.allVersion}")

//    println("----> for plugin appid $CurrentAppID")

    project.android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.applicationId}_${variant.versionName}.apk"
        }
    }
    afterEvaluate { project ->
        project.tasks.assembleDebug.doLast {
            println("$project ----> assembleDebug")
            deletePluginInHost(deployTargets)
            copyPluginToHost(deployTargets, 'debug')
        }

        project.tasks.assembleRelease.doLast {
            deletePluginInHost(deployTargets)
            copyPluginToHost(deployTargets, 'release')
        }
    }

} else if (project.name.startsWith("component_") && !(project.ext.has("alwaysLib") && project.ext.alwaysLib)) {
    println("$project ---->  set app as impl plugin only")
    project.dependencies.add("implementation", "com.wlqq.phantom:phantom-host-lib:${versions.phantom.allVersion}")
    project.dependencies.add("implementation", "com.wlqq.phantom:phantom-communication-lib:${versions.phantom.allVersion}")
}

println("-------------------end plugin config-------------------")


def deletePluginInHost(Set<Project> targets) {
    targets.each { p ->
        def assetsDir = file(p.getProjectDir().absolutePath + '/src/main/assets/plugins')
        if (!assetsDir.exists()) {
            assetsDir.mkdirs()
        }
        assetsDir.eachFile { file ->
            println "list assets file: " + file.name
            if (file.name.startsWith(android.defaultConfig.applicationId)) {
                def ret = file.delete()
                println "delete assets file: ${file.name}, result: ${ret}"
            }
        }
    }
}

def copyPluginToHost(Set<Project> targets, String dir) {

    targets.each { p ->
        println "copy build plugin to $p assets... "
        copy {
            from(buildDir.absolutePath + '/outputs/apk/' + dir) {
                include('*.apk')
            }

            if(dir == 'debug'){
                rename ".apk", "_${dir}.apk"
            }

            into(p.getProjectDir().absolutePath + '/src/main/assets/plugins/')
        }

    }
}