import java.util.regex.Pattern


ext.mainApp = true //如果此module为主app module，一直以application方式编译，则启用这一行
//ext.alwaysLib = true //如果此module为基础库，一直以library方式编译，则启用这一行
apply from: rootProject.file("buildscripts/cc-settings-2-app.gradle")
//注意：最好放在build.gradle中代码的第一行


apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'//kapt3插件

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        if (project.ext.runAsApp) {
            applicationId "me.jbusdriver"
        }
        minSdkVersion 21
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "github"

        // 开启multidex
        multiDexEnabled true
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            try {
                storeFile file(KEYSTORE_FILE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEYSTORE_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ignored) {
                if (System.getenv("KEYSTORE_FILE") != null) {
                    storeFile = file(System.getenv("KEYSTORE_FILE"))
                    storePassword = System.getenv("KEYSTORE_PWD")
                    keyAlias = System.getenv("KEYSTOREmultiDexEnabled _ALIAS")
                    keyPassword = System.getenv("KEYSTORE_ALIAS_PWD")
                } else {
                    throw GradleException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
                }
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    kapt {
        useBuildCache = true
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
    buildTypes {
        debug{
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    logger.quiet("build release type ...")
                    def vName = VersionName()
                    def vCode = VersionCode()
                    variant.outputs.all { output ->
                        output.setVersionNameOverride(vName)
                        output.setVersionCodeOverride(vCode)
                        outputFileName = "JubsDriver[v${output.versionNameOverride}]_(code_${output.versionCodeOverride}).apk"
                    }
                }

            }

        }


    }
    productFlavors {
        gayhub {
            dimension "github"
            manifestPlaceholders = [UMENG_KEY: "58e8ecaa7666134a5a001740",
                                    CHANNEL  : "gayhub"]
        }
    }
}

//使用git的Tag来自动定制Version
def VersionCode() {
    def cmd = 'git rev-list master --first-parent --count'//master分支
//    def cmd = 'git tag'
//    def cmd = 'git tag'
//    def code = cmd.execute().text.trim().split("\n").size()
    def code = cmd.execute().text.trim().toInteger()
    logger.quiet(cmd + " >>>> code = " + code)
    return code
}

//使用git的Tag来自动定制Version
def VersionName() {
    def cmd = ''' git log --tags --simplify-by-decoration --pretty="format:%d" '''
    def tags = cmd.execute().text.readLines()
    logger.quiet(cmd + " >>>> tags  = " + tags)
    def verName = tags.find {
        it.contains("tag:")
    }.find(Pattern.compile(/tag: v[0-9a-z.-]+/)).replace("tag: v" ,"").trim()
    logger.quiet(cmd + " >>>> verName  = " + verName)
    cmd = 'git rev-list  --all  --count'
    def code = cmd.execute().text.trim().toInteger()

    def versionName = verName + "build" + code
    logger.quiet(cmd + " >>>> versionName  = " + versionName)
    return versionName
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    implementation "com.xw.repo:bubbleseekbar:${versions.bubbleseekbar}-lite"
    implementation("com.xiaofeng.android:flowlayoutmanager:${versions.flowlayoutmanager}") {
        exclude group: 'com.android.support'
    }


    //    implementation(name: 'bugly_crashreport_upgrade-1.3.5', ext: 'aar')
    // 远程依赖集成方式（推荐）
//    implementation "com.tencent.bugly:crashreport_upgrade:${versions.bugly}"
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
//    implementation "com.tencent.tinker:tinker-android-lib:${versions.tinker}"

    //leak
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakcanary}"
    // Optional, if you use support library fragments:
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${versions.leakcanary}"

    //components
    addComponent "component_magnet"
    addComponent "component_plugin_manager"

    implementation "com.android.support:multidex:1.0.3" // 多dex配置
    implementation "com.wlqq.phantom:phantom-host-lib:${versions.phantom.allVersion}"
    implementation "com.wlqq.phantom:phantom-communication-lib:${versions.phantom.allVersion}"
}

configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

/*// 依赖插件脚本
def taskNames = project.gradle.startParameter.taskNames
def currentTaskName = taskNames.isEmpty() ? "" : taskNames.first()
// 开启tinker-support插件，默认值true
def checkEnable = !currentTaskName.isEmpty() && currentTaskName.toLowerCase().contains("release")
println "tinker check : currentTaskName =  ${currentTaskName}  is enable : ${checkEnable}"

if (checkEnable) {
    this.rootProject.extensions.appOldVerCode = 258
    this.rootProject.extensions.appOldVerName = "1.2.9build419"
    this.rootProject.extensions.appVerCode = VersionCode()
    this.rootProject.extensions.appVerName = VersionName()
    apply from: 'tinker.gradle'
}*/
